//SPDX-License-Identifier:none
pragma solidity ^0.8.12;

contract Donation {

    uint256 _count;
    address _owner;
    address [] public _users;
    uint [] public _value;

    mapping (
    
            uint256 => uint256
        )public allUsersDetails;
   
   
    mapping(address => uint256) public _balance;
    mapping(
        address =>mapping(
            string =>mapping(
                string=>uint256
            )
        )
    )public _detailBalance;

constructor () {
    _owner == msg.sender;
    
}



    receive() external payable {
        _balance[msg.sender] +=msg.value;
        _detailBalance[msg.sender]["saving"]["eth"]+=msg.value;
        _count++;
        require(!checkDuplicate(),"This is Duplicate");
        _users.push(msg.sender);
        _value.push(msg.value);
        allUsersDetails[msg.value]+=msg.value;
    }


    function _allUsersDetails() external payable   {
        _users.push(msg.sender);
        _value.push(msg.value);
    }    

    
    function __allUsersDetails(uint256) external  {
        
        _users.push();
        _value.push();
        
    }    


    function checkDuplicate() internal view returns (bool){
        bool _valid;
        for(uint i=0; i < _users.length; i++){
            if(_users[i] == msg.sender){
                _valid = true;
            }
        }
        return _valid;
    }  




    function bulkTransfer(uint _vlu) external {
        for(uint i=0; i < _users.length; i++){
            _balance[_users[i]] +=_vlu;
            payable(_users[i]).transfer(_vlu);
        }

            
    } 


}





------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------s

//SPDX-License-Identifier:none
pragma solidity ^0.8.12;

contract book{
    address _owner;

    struct _book_data{
        uint256 _id;
        string _name;
        string _authorName;
        uint _edition;
        uint _supply;
        bool _status;
        //mapping(address => bool) _distributor; 
    }

constructor () {
    _owner == msg.sender;
}

    modifier onlyOwner(){
        require(msg.sender == _owner,"only owner can operate");
        _;
        _owner = address(0);
    }


mapping (uint => _book_data) public _Library;
    //_book_data newBook;

    function viewBook() external view returns(_book_data memory xgy){
        //return newBook;
        return _Library[_number];
    }

    function addNewBook() external {
        //newBook = _book_data({
        bookCount++;
        _Library[bookCount] = _book_data({
        //_id:34,
        // _name:"mastering Bitcoin",
        // _authorName:"asd",
        // _edition:12,
        // _supply:100,
        // _status:true
        // });
        

    }


}
